// mixins.scss
// Any/all mixins (so that dependency order can be controlled in styles.scss)

// breakpointage
@mixin bp( $measure ){
  @media ( min-width: $measure ){
    @content;
  }
}

// phones in landscape
@mixin yudodis
{
    @media ( max-width: 896px ) and ( orientation: landscape )
    {
        @content;
    }
}

// base transitions
@mixin transition( $property: all, $duration: $base-transition-duration, $easing: ease-in-out ){
  -webkit-transition: $property $duration $easing;
  -moz-transition: $property $duration $easing;
  -ms-transition: $property $duration $easing;
  -o-transition: $property $duration $easing;
  transition: $property $duration $easing;
}

// super duper bolderer fix
@mixin bold-fix {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  opacity: .99;
}


// some placeholders to sprinkle throughout
%heading-primary {
	color: $color-warning;
  font-family: $font-avenir;
  font-weight: 700;
	font-size: 30px;
}
%heading-secondary {
	color: $color-warning;
	font-family: $font-avenir;
    font-size: 18px;
    font-weight: 700;
}
%heading-terciary,
%heading-sidebar {
	color: $color-warning;
	font-family: $font-avenir;
    font-size: 16px;
    font-weight: 700;
}
%btn {
	background: $color-warning;
	border-radius: 1.3em;
	color: #fff;
	display: inline-block;
	font-family: $font-avenir !important;
    font-size: 14px;
    font-weight: 700;
	height: 2.5em;
	margin-top: 0;
	min-width: 200px;
	max-width: 100%;
	padding: .6em 20px;
	text-transform: uppercase;
	white-space: nowrap;
  width: auto;
  @include transition();
  @include bold-fix();

  > * { // :(
		display: inline !important;
		font-family: inherit;
		font-size: inherit;
		text-transform: inherit;
  }

  &:hover {
    background: darken( $color-warning, 10%);
    @include transition();
  }

  &:focus {
    background: lighten( $color-warning, 10%);
    border-color: inherit;
    outline: none;
    box-shadow: inset 0px 0px 0px 2px black;
  }

}
%label-text {
	color: $color-warning;
	font-family: Arial, sans-serif;
  font-size: 16px;
	font-weight: normal;
}
%input-text {
  color: $color-warning;
	font-family: Arial, sans-serif;
  font-size: 16px;
	font-weight: normal;
}


/* Text meant only for screen readers. */
@mixin screen-reader-text {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  word-wrap: normal !important;
}


// Just to be safe.............
// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
     -moz-box-ordinal-group: $val;
  	     -ms-flex-order: $val;
  	      -webkit-order: $val;
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

// Focus for a11y
@mixin focus-border {
  &:focus {
    border-color: inherit;
    outline: none;
    box-shadow: inset 0px 0px 0px 2px $color-warning;
  }
}

@mixin clearfix {
  &:after {
    content: "";
    clear: both;
    display: block;
  }
}

// Form Screen Loading Message
@mixin loading-messaging( $message_string: 'Please wait\2026') {
  .loading-icon {
    // border: 10px solid lime;
    background-color: rgba( white, 0.9 );

    .ring-spinner {
        transform: translate(-50%, -80%);
        &:after {
            @include transition();
            // font-style: italic;
            font-family: $font-avenir;
            font-weight: 700;
            content: $message_string;
            position: absolute;
            bottom: 0;
            left: 50%;
            // border: 2px solid blue;
            transform: translate( -50%, 100% );
            text-align: center;
            width: 66vw;
            padding: 6px;
            background-color: rgba( white, 0.666 );
            @include bp( $screen-sm ){
                width: 400px;
            }
            @include bp( $screen-md ){
                width: 600px;
            }
        }
    }
    .loading-icon__message {
        display: none;
    }
}

}